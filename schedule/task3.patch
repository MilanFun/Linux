diff --git a/fs/proc/base.c b/fs/proc/base.c
index 05452c3b9872..a500a9260cf3 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -636,6 +636,13 @@ static int proc_pid_limits(struct seq_file *m, struct pid_namespace *ns,
 	return 0;
 }
 
+static int proc_schedule_counter(struct seq_file *m, struct pid_namespace *ns,
+		                 struct pid *pid, struct task_struct *task)
+{
+	seq_printf(m, "%d\n", task->counter_schedule);
+	return 0;
+}
+
 #ifdef CONFIG_HAVE_ARCH_TRACEHOOK
 static int proc_pid_syscall(struct seq_file *m, struct pid_namespace *ns,
 			    struct pid *pid, struct task_struct *task)
@@ -3311,6 +3318,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 	ONE("oom_score",  S_IRUGO, proc_oom_score),
 	REG("oom_adj",    S_IRUGO|S_IWUSR, proc_oom_adj_operations),
 	REG("oom_score_adj", S_IRUGO|S_IWUSR, proc_oom_score_adj_operations),
+	ONE("schedule_counter", S_IRUGO, proc_schedule_counter),
 #ifdef CONFIG_AUDIT
 	REG("loginuid",   S_IWUSR|S_IRUGO, proc_loginuid_operations),
 	REG("sessionid",  S_IRUGO, proc_sessionid_operations),
@@ -3657,6 +3665,7 @@ static const struct pid_entry tid_base_stuff[] = {
 	ONE("cpu_resctrl_groups", S_IRUGO, proc_resctrl_show),
 #endif
 	ONE("oom_score", S_IRUGO, proc_oom_score),
+	ONE("schedule_counter", S_IRUGO, proc_schedule_counter),
 	REG("oom_adj",   S_IRUGO|S_IWUSR, proc_oom_adj_operations),
 	REG("oom_score_adj", S_IRUGO|S_IWUSR, proc_oom_score_adj_operations),
 #ifdef CONFIG_AUDIT
diff --git a/include/linux/sched.h b/include/linux/sched.h
index eed5d65b8d1f..8efef4423962 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -781,7 +781,7 @@ struct task_struct {
 	int				wake_cpu;
 #endif
 	int				on_rq;
-
+        int                             counter_schedule;
 	int				prio;
 	int				static_prio;
 	int				normal_prio;
diff --git a/kernel/fork.c b/kernel/fork.c
index ed4e01daccaa..636b344edb8e 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -2331,6 +2331,7 @@ __latent_entropy struct task_struct *copy_process(
 
 	retval = -ENOMEM;
 	p = dup_task_struct(current, node);
+	p->counter_schedule = 0;
 	if (!p)
 		goto fork_out;
 	p->flags &= ~PF_KTHREAD;
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index a68d1276bab0..762a78099bd0 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3708,6 +3708,7 @@ ttwu_stat(struct task_struct *p, int cpu, int wake_flags)
 static inline void ttwu_do_wakeup(struct task_struct *p)
 {
 	WRITE_ONCE(p->__state, TASK_RUNNING);
+	p->counter_schedule++;
 	trace_sched_wakeup(p);
 }
 
@@ -4029,6 +4030,7 @@ bool ttwu_state_match(struct task_struct *p, unsigned int state, int *success)
 	 */
 	if (p->saved_state & state) {
 		p->saved_state = TASK_RUNNING;
+		p->counter_schedule++;
 		*success = 1;
 	}
 #endif
@@ -4823,6 +4825,7 @@ void wake_up_new_task(struct task_struct *p)
 	 * as we're not fully set-up yet.
 	 */
 	p->recent_used_cpu = task_cpu(p);
+	p->counter_schedule++;
 	rseq_migrate(p);
 	__set_task_cpu(p, select_task_rq(p, task_cpu(p), WF_FORK));
 #endif
@@ -9217,6 +9220,7 @@ void __init init_idle(struct task_struct *idle, int cpu)
 	raw_spin_rq_lock(rq);
 
 	idle->__state = TASK_RUNNING;
+	idle->counter_schedule++;
 	idle->se.exec_start = sched_clock();
 	/*
 	 * PF_KTHREAD should already be set at this point; regardless, make it
